FEATURES
-auto register actions for commands with spring
-dispatch commands to actions
-filter commands and results
-schedule commands
-predefined common results
-command validation in actions
-Command serialization to XML (extendable)

TODO/IDEAS

V1.0

DONE:
Remove Spring dependency and only add it as new module(s)
-InVmDispatcher
	-Configurable executor. Prepare also to ForkJoinPool
-SpringInVmDispatcher (autowired, transactional)
-Rest HTTP dispatcher
	-Servlet 3 async
	-URL is command specific
		-@Path annotation (jaxrs) is used on commands to modify url
-Jms dispatcher
	-Implement as remote dispatcher and receiver
	-configurable message format

TODO:
Timeout support
	-All dispatchers should have timeout. Remotes delegates timeouts to the endpoint and protocoll specific timeout are used like Jms ttl.
Cache support
	-Implement as a DispatcherFilter
	-Remote uses headers
	-Local cache? No headers
-Load balancer dispatcher (uses an LB strategy to delegate to dispatcher instances)

Other Filters
	-Retry with retry policy
	-Circuit breaker
	-Logging
	-Monitoring (Command/Result logging, action execution time, jmx support)

Unit and system test coverage

V1.1

Action chaining concept. Should we allow this? A result of an action could be a CommandResult which contains the new command or we could use converters like in Camel.

Transaction usecases
-Run each command in separate transaction
-Run multiple commands in one transaction
-Run multiple in the same but one should commit anyhow (example: audit logging)

Command factory pattern for creating commands from different inputs (like rest parameters or camel message)

Akka integration

Camel integration
	-Camel dispatcher components. 
	-Command in the message body
	-Result could go to body or to header or just drop
	-Converter to make command from other types

Spring security integration
	Run as 
	Run as async (support for current user and other user too)
	RolesAllowed

Bulk dispatcher


Example implementation:
Rest interface
Jms, async and sync dispathing
Caching
Transaction handling (with error audit)



